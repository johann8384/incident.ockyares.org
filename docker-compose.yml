version: '3.8'

services:
  # PostGIS Database
  postgis:
    image: postgis/postgis:15-3.3
    container_name: emergency_postgis
    environment:
      POSTGRES_DB: emergency_ops
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: emergency_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - ./docker/postgis_data:/var/lib/postgresql/data
      - ./docker/database/init:/docker-entrypoint-initdb.d
      - ./docker/database/backups:/backups
    ports:
      - "5432:5432"
    networks:
      - emergency_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d emergency_ops"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgREST API
  postgrest:
    image: postgrest/postgrest:v11.2.0
    container_name: emergency_postgrest
    environment:
      PGRST_DB_URI: postgresql://postgres:emergency_password@postgis:5432/emergency_ops
      PGRST_DB_SCHEMA: public
      PGRST_DB_ANON_ROLE: web_anon
      PGRST_JWT_SECRET: "your-secret-jwt-key-min-32-chars-long"
      PGRST_DB_POOL: 10
      PGRST_DB_POOL_TIMEOUT: 10
    ports:
      - "3000:3000"
    networks:
      - emergency_network
    depends_on:
      postgis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # GeoServer for WMS
  geoserver:
    image: kartoza/geoserver:2.23.0
    container_name: emergency_geoserver
    environment:
      GEOSERVER_DATA_DIR: /opt/geoserver/data_dir
      GEOSERVER_ADMIN_PASSWORD: emergency_admin
      GEOSERVER_ADMIN_USER: admin
      INITIAL_MEMORY: 1G
      MAXIMUM_MEMORY: 2G
      STABLE_EXTENSIONS: wps,csw
      EXTRA_JAVA_OPTS: "-Xms1G -Xmx2G"
    volumes:
      - ./docker/geoserver_data:/opt/geoserver/data_dir
      - ./docker/geoserver/workspaces:/opt/geoserver/data_dir/workspaces
      - ./docker/geoserver/styles:/opt/geoserver/data_dir/styles
    ports:
      - "8080:8080"
    networks:
      - emergency_network
    depends_on:
      postgis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/geoserver/web/ || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Flask Application
  incident_app:
    build: .
    container_name: emergency_incident_app
    environment:
      DB_HOST: postgis
      DB_PORT: 5432
      DB_NAME: emergency_ops
      DB_USER: postgres
      DB_PASSWORD: emergency_password
      EXTERNAL_DB_HOST: ${EXTERNAL_IP:-localhost}
      FLASK_ENV: production
    volumes:
      - ./docker/docker/static/qr_codes:/app/static/qr_codes
      - ./docker/docker/logs:/app/logs
      - ./docker/docker/templates:/app/templates
    ports:
      - "5000:5000"
    networks:
      - emergency_network
    depends_on:
      postgis:
        condition: service_healthy
      postgrest:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: emergency_nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/static:/var/www/static:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - emergency_network
    depends_on:
      - incident_app
      - geoserver
      - postgrest
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: emergency_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - emergency_network
    restart: unless-stopped

volumes:
  postgis_data:
  geoserver_data:
  redis_data:

networks:
  emergency_network:
    driver: bridge
