name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Run weekly on Mondays at 2 AM

# Cancel previous runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Add permissions for SARIF uploads
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-security-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-security-
    
    - name: Run security scans in Docker
      run: |
        # Use the same docker-compose setup as local development
        docker compose -f docker-compose.security.yml up --build --abort-on-container-exit
    
    - name: Upload Security Reports (Artifacts)
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: security-reports/
      if: always()
    
    - name: Upload Bandit SARIF (if exists)
      run: |
        # Convert bandit JSON to SARIF if possible, or skip
        if [ -f "security-reports/bandit-report.json" ]; then
          echo "Bandit report found, but no SARIF conversion available"
        fi
      continue-on-error: true
    
    - name: Upload Semgrep SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: security-reports/semgrep-report.json
      if: always() && hashFiles('security-reports/semgrep-report.json') != ''
      continue-on-error: true
    
    - name: Clean up
      if: always()
      run: docker compose -f docker-compose.security.yml down

  # Separate job for Docker-specific security scanning
  docker-security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image for scanning
      run: |
        docker build -t emergency-incident-app:security-test .
    
    - name: Run Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: true
    
    - name: Upload Hadolint SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: hadolint-results.sarif
      if: always() && hashFiles('hadolint-results.sarif') != ''
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'emergency-incident-app:security-test'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      if: always() && hashFiles('trivy-results.sarif') != ''

  # Separate secrets scanning job
  secrets-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      continue-on-error: true
    
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
      continue-on-error: true

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
