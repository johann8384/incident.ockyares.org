name: Test and Quality Assurance

on:
  push:
    branches: [ main, develop, fresh-start ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Run tests in Docker
      run: |
        # Use the same docker-compose setup as local development
        docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit --exit-code-from test_runner
    
    - name: Extract coverage report
      run: |
        # Extract XML coverage for codecov
        docker-compose -f docker-compose.test.yml run --rm test_runner \
          python -m pytest tests/ --cov=app --cov=models --cov-report=xml --quiet || true
        
        # Copy files from volume
        docker run --rm -v test_coverage:/src alpine cp /src/coverage.xml /tmp/ 2>/dev/null || true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      if: hashFiles('coverage.xml') != ''
    
    - name: Clean up
      if: always()
      run: docker-compose -f docker-compose.test.yml down -v

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy pylint
    
    - name: Run flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run flake8 warnings
      run: flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Check code formatting with black
      run: black --check --diff .
      continue-on-error: true
    
    - name: Check import sorting with isort
      run: isort --check-only --diff .
      continue-on-error: true
    
    - name: Run mypy type checking
      run: mypy . --ignore-missing-imports --no-strict-optional
      continue-on-error: true
    
    - name: Run pylint
      run: pylint **/*.py --disable=C0114,C0115,C0116,R0903,R0913,R0914
      continue-on-error: true
