name: Test and Quality Assurance

on:
  push:
    branches: [ main, develop, fresh-start ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_DB: emergency_ops_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          postgresql-client \
          gdal-bin \
          libgdal-dev \
          gcc \
          g++ \
          libpq-dev
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/test-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
    
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5433 -U postgres; do
          echo "Waiting for postgres..."
          sleep 2
        done
    
    - name: Set up test database
      run: |
        PGPASSWORD=test_password psql -h localhost -p 5433 -U postgres -d emergency_ops_test -c "CREATE EXTENSION IF NOT EXISTS postgis;"
      env:
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5433
        TEST_DB_USER: postgres
        TEST_DB_PASSWORD: test_password
    
    - name: Run tests with coverage
      run: |
        python -m pytest tests/ -v --cov=app --cov=models --cov-report=xml --cov-report=html --cov-report=term-missing
      env:
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5433
        TEST_DB_USER: postgres
        TEST_DB_PASSWORD: test_password
        FLASK_ENV: testing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy pylint
    
    - name: Run flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run flake8 warnings
      run: flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Check code formatting with black
      run: black --check --diff .
      continue-on-error: true
    
    - name: Check import sorting with isort
      run: isort --check-only --diff .
      continue-on-error: true
    
    - name: Run mypy type checking
      run: mypy . --ignore-missing-imports --no-strict-optional
      continue-on-error: true
    
    - name: Run pylint
      run: pylint **/*.py --disable=C0114,C0115,C0116,R0903,R0913,R0914
      continue-on-error: true